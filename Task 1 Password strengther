Here is a python implementation of a password strength assessment tool.The tool evalutes passwords based on their length , complexicity , and uniqueness. It provides a strength score and actionable feedback.
Feautures
1.Length Evalution: Encourages longer passwords by awarding higher scores for length>12 characters.
2.Complexity Evaluation: Ensures that passwords have diverse character types.
3.Uniqueness Check:Identifiers and warns against overly common or predictable patterns.
4.Actionable Feedback:Provides specific tips for improving the password.
import re
import math

# Function to check password strength
def check_password_strength(password):
    # Minimum length check
    length_score = 0
    if len(password) >= 8:
        length_score = 2
    if len(password) >= 12:
        length_score = 4
    if len(password) >= 16:
        length_score = 6
    
    # Complexity checks
    complexity_score = 0
    if re.search(r'[a-z]', password): complexity_score += 1  # Lowercase
    if re.search(r'[A-Z]', password): complexity_score += 1  # Uppercase
    if re.search(r'[0-9]', password): complexity_score += 1  # Numbers
    if re.search(r'[\W_]', password): complexity_score += 1  # Special characters
    
    # Check for dictionary words (common sequences)
    common_patterns = ['password', '12345', 'qwerty', 'abcde', 'letmein']
    for pattern in common_patterns:
        if pattern in password.lower():
            return "Weak password: Contains common patterns."
    
    # Entropy calculation: Shannon entropy
    def calculate_entropy(password):
        # Use a set of unique characters to calculate entropy
        char_set = set(password)
        entropy = len(char_set) * math.log2(len(char_set)) if len(char_set) > 1 else 0
        return entropy
    
    entropy = calculate_entropy(password)
    entropy_score = 0
    if entropy < 4:
        entropy_score = 1
    elif entropy < 8:
        entropy_score = 2
    else:
        entropy_score = 3

    # Overall score calculation
    total_score = length_score + complexity_score + entropy_score
    
    # Providing feedback based on score
    if total_score <= 4:
        strength = "Weak password"
    elif total_score <= 8:
        strength = "Moderate password"
    else:
        strength = "Strong password"

    # Detailed feedback
    feedback = {
        'strength': strength,
        'length': length_score,
        'complexity': complexity_score,
        'entropy': entropy_score,
        'total_score': total_score
    }
    
    return feedback

# Example of testing
password = input("Enter your password to check strength: ")
result = check_password_strength(password)
print(f"Password Strength: {result['strength']}")
print(f"Length Score: {result['length']}")
print(f"Complexity Score: {result['complexity']}")
print(f"Entropy Score: {result['entropy']}")
